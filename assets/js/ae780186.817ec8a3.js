"use strict";(self.webpackChunkthe_power_pilot=self.webpackChunkthe_power_pilot||[]).push([[795],{2021:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/06/06/auto-release-notes","metadata":{"permalink":"/projects/2024/06/06/auto-release-notes","source":"@site/projects/2024-06-06-auto-release-notes.md","title":"Auto Release Notes","description":"","date":"2024-06-06T11:52:31.221Z","tags":[],"readingTime":3.62,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Auto Release Notes","description":"","date":"2024-06-06T11:52:31.221Z","preview":"","draft":false,"tags":[],"categories":[],"type":"default"},"unlisted":false},"content":"[![Pylint](https://github.com/hankanman/Auto-Release-Notes/actions/workflows/pylint.yml/badge.svg)](https://github.com/hankanman/Auto-Release-Notes/actions/workflows/pylint.yml)\\n\\nThis script generates release notes for a given release version of a solution in Azure DevOps. It retrieves work items from Azure DevOps, summarizes them using GPT, and outputs the release notes in Markdown and HTML formats.\\n\\n## Requirements\\n\\nYou will need a PAID Open AI API key to run the script, support for other methods will come in future releases\\n\\n## Run as Azure DevOps Pipeline\\n\\n1. Copy the `Auto-Release-Notes.yml` file from [the pipelines directory of this repo](https://github.com/hankanman/Auto-Release-Notes/pipelines)\\n2. Add it to the DevOps Repo you wish to run the notes for, it is recommended this is on the main branch of the repo, the trigger is set to run on update of the main branch by default\\n3. Create a new pipeline in Azure DevOps\\n4. Select \\"Azure Repos Git\\"\\n5. Select your Repo\\n6. Select \\"Existing Azure Pipelines YAML file\\"\\n7. Select the \\"/Auto-Release-Notes.yml\\" file, this will vary depending on where you stored the file in the repo\\n8. Select \\"Continue\\"\\n9. Select \\"Variables\\" > \\"New Variable\\"\\n   - Name: \\"Model API Key\\"\\n   - Value: `<YOUR OPENAI API KEY>`\\n   - Keep this value secret: `True`\\n   - Let users override this value when running this pipeline: `True`\\n10. Select \\"OK\\"\\n11. Adjust the remaining variables in the YAML (lines 10-20):\\n\\n    ```yaml\\n    variables:\\n      # The Organisation Name of the Azure DevOps organisation to use i.e. \\"contoso\\" from \\"https://dev.azure.com/contoso\\"\\n      ORG_NAME: \\"YOUR_ORG_NAME\\"\\n      # The plain text name of the project to use (not the url encoded version) i.e. \\"My Project\\" from \\"https://dev.azure.com/contoso/My%20Project\\"\\n      PROJECT_NAME: \\"YOUR_PROJECT_NAME\\"\\n      # The name of the solution. This will appear as part of the title of the notes document\\n      SOLUTION_NAME: \\"YOUR_SOLUTION_NAME\\"\\n      # The query id for the release notes query setup in Azure DevOps as a GUID i.e. \\"f5b6e2af-8f0c-4f6c-9a8b-3f3f2b7e0c1e\\" from \\"https://dev.azure.com/contoso/My%20Project/_queries/query/f5b6e2af-8f0c-4f6c-9a8b-3f3f2b7e0c1e\\"\\n      RELEASE_QUERY: \\"DEVOPS_WORK_ITEM_QUERY_GUID\\"\\n      # Describe the software or project that these release notes are for, this provides context to GPT and the notes being written\\n      SOFTWARE_SUMMARY: \\"LONG_SOFTWARE_SUMMARY\\"\\n      # The API key for the GPT service (stored as a secret) DO NOT MODIFY THE BELOW OR ENTER YOUR API KEY HERE.\\n      MODEL_API_KEY: $(Model API Key)\\n    ```\\n\\n12. Hit \\"Save\\" or \\"Save and Run\\"\\n13. The pipeline will now run whenever the main branch is updated\\n\\n## Run the Script Locally\\n\\n### Prerequisites\\n\\n- Python 3.7+\\n- Azure DevOps Personal Access Token (PAT)\\n- OpenAI API Key\\n- Node.js and npm (for optional markdownlint-cli installation)\\n\\n### Dependencies\\n\\n#### Automated Setup\\n\\n##### Unix-based Systems\\n\\nTo automate the setup of the repository on Unix-based systems, run the `setup.sh` script. This script will install the required Python packages, install `markdownlint-cli`, and create a `.env` file with blank values if it does not exist.\\n\\n```bash\\nchmod +x setup.sh\\n./setup.sh\\n```\\n\\n##### Windows\\n\\nTo automate the setup of the repository on Windows, run the `setup.ps1` PowerShell script. This script will install the required Python packages, install `markdownlint-cli`, and create a `.env` file with blank values if it does not exist.\\n\\n```powershell\\n.\\\\setup.ps1\\n```\\n\\n#### Manual Setup\\n\\nIf you prefer to set up the environment manually, follow these steps:\\n\\n1. Install the required Python packages:\\n\\n```bash\\npip install -r requirements.txt\\n```\\n\\n2. Install `markdownlint-cli` using npm:\\n\\n```bash\\nnpm install -g markdownlint-cli\\n```\\n\\n3. Create a `.env` file in the root directory of the project to store your secrets. This file should contain the following variables:\\n\\n```dotenv\\n# Azure DevOps and OpenAI Configuration\\nORG_NAME=\\nPROJECT_NAME=\\nSOLUTION_NAME=\\nRELEASE_VERSION=\\nRELEASE_QUERY=\\nPAT=\\nGPT_API_KEY=\\nMODEL=\\nMODEL_BASE_URL=\\nDEVOPS_BASE_URL=\\n```\\n\\nIf the `.env` file does not exist, it will be generated with blank values on the first load.\\n\\n### Running the Script\\n\\nTo run the script, execute the following command in your terminal:\\n\\n```bash\\npython main.py\\n```\\n\\nThe script will generate the release notes in the specified output folder in both Markdown and HTML formats.\\n\\n### Optional: Markdown Linting\\n\\nIf you wish to lint and format the generated Markdown file, you can run the following command:\\n\\n```bash\\nmarkdownlint ./Releases/*.md\\n```\\n\\n### Customizing Prompts\\n\\nYou can customize the GPT prompts by editing `SUMMARY_PROMPT` and `ITEM_PROMPT` in the `config.py` file.\\n\\n### Logging\\n\\nThe script uses Python\'s logging module to provide detailed logs of its execution. You can adjust the logging level in `main.py` by modifying the `setup_logs` function call.\\n\\n## Contributing\\n\\nIf you have any suggestions or improvements, feel free to create a pull request or open an issue.\\n\\n## License\\n\\nThis project is licensed under the MIT License."}]}}')}}]);